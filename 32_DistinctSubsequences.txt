class Solution {
public:
    
    int func(int i , int j , string s1 , string s2 , vector<vector<int>> &dp){
        
        if(i<0 && j>=0){
            return 0;
        }
        
        if(j<0){ return 1;}
        
        
        
        
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
       
        
        if(s1[i] == s2[j]){
            
            return dp[i][j] =func(i-1 , j-1 , s1,s2 , dp) + func(i-1 , j , s1,s2 , dp);
            
        }
        
        
        return dp[i][j] =func(i-1 , j , s1,s2 , dp);
        
        
    }
    
    
    int numDistinct(string s, string t) {
        
//         int n = s.length();
//         int m = t.length();
        
//         vector< vector<int> > dp(n , vector<int>(m , -1));
        
        
//         return func(n-1 , m-1 , s , t , dp);
        
        
        
        
        int n = s.length();
        int m = t.length();
        
        vector<vector<double> > dp(n+1 , vector<double> (m+1 , 0));
        
        for(int i=0;i<=n;i++){   // <=n 
            dp[i][0] = 1;
        }
        
        for(int j=1;j<=m;j++){    //  <=m      ,,    j = 1 , not from j=0   , bcz  dp[0][0] = 0    
            dp[0][j] = 0;
        }
        
        
        
        for(int i=1;i<=n;i++){
            
            for(int j=1;j<=m ;j++){
                
                
                 if(s[i-1] == t[j-1]){
                     dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
                 }
                
                else{
                    dp[i][j] =dp[i-1][j]; 
                }
                
            }
        }
        
        
        return (int)dp[n][m];
        
        
    }
};