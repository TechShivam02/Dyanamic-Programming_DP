
    
int func(int n , int m , string &st1 , string &st2  ,  vector<vector<int>> &dp){
        
        if(n==0 || m==0){
            return 0;
        }
        
        
        if(dp[n][m] != -1){
            return dp[n][m];
        }
        
        
        if(st1[n-1] == st2[m-1]){
            return dp[n][m] = 1 + func(n-1 , m-1 , st1 , st2 , dp);
        }
        
        
        return dp[n][m] = 0 + max( func(n-1 , m , st1 , st2 , dp) , func(n , m-1  , st1 , st2 , dp) );
    
}
    
    
    
    
    int longestCommonSubsequence(string s1, string s2) {
        
        int n = s1.length();
        int m = s2.length();
        
        
        
        // vector<vector<int>> dp(n+1 , vector<int>(m+1 , -1));
        // return func(n,m,s1 , s2 , dp);
        
        
          
        
      vector<vector<int>> dp(n+1 , vector<int>(m+1 , 0));
      
        
        
        for(int i=0;i<n+1;i++){   //  0,1,2 .... n    length
            
            for(int j=0;j<m+1;j++){   //  0,1,2 .... m    length
                
                if(i==0 || j==0)
                {
                   dp[i][j]  =0 ;
                }
                
                else if(s1[i-1] == s2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                
                else{
                    dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
                }
                
                
            }
        }
        
        
        
        return dp[n][m];
        
        
        
        
        
        
        
        
    }