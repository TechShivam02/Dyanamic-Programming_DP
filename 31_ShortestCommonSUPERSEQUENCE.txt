
string PrintLongestCommonSubSeq(string x , string y , int m , int n ){
    
    
    int dp[1001][1001];
    
        
        for(int i=0;i<=m;i++){
            
            for(int j=0;j<=n;j++){
                
                if(i == 0  || j==0){
				    dp[i][j] = 0;
				   
                 }
                 
                  
                  else if( x[i-1] == y[j-1] ){
                      dp[i][j]=1+dp[i-1][j-1];             // 1+lcs(x,y,m-1,n-1)
                     
                  }
                
                else{
                    dp[i][j] = max ( dp[i-1][j] , dp[i][j-1] );         // max ( lcs(x,y,m-1,n) ,lcs(x,y,m,n-1) };
                  
				    
                }
            }
            
          
            
            
        }
        
        
        
        
      int i=m;
      int j=n;
      
        
    
      
      
      string ans="";
      
      
      while(i>0 && j>0){
      
        if(x[i-1] == y[j-1]){
            
       
            ans.push_back(x[i-1]);
            i--;
            j--;
            
            
        }
        
        
       else if (dp[i - 1][j] > dp[i][j - 1])   // upper ele greater then left wala ele 
		{
		    
           
			ans.push_back(x[i - 1]);
                i--;
                
		}
		else
		{
		   
            
			ans.push_back(y[j - 1]);


			j--;
			
		}
}      



        // Don't Forgot to write the these , if left any string 
        
              while (i > 0) {
        		
        		ans.push_back(x[i - 1]);
        		i--;
           	
                   
              }
        	
        	
        	
        	while (j > 0){
        		ans.push_back(y[j - 1]);
        		j--;
        	}
	
	

           
           
    
      
      
      reverse(ans.begin() , ans.end());
      
      return ans;
    
}
    
    
    
    
    string shortestCommonSupersequence(string str1, string str2) {
        
        
        return PrintLongestCommonSubSeq(str1 , str2 , str1.length() , str2.length());
        
    }