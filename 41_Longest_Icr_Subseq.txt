class Solution {
public:
    
    
    int func(int index , int prev , int n , vector<int> &arr , vector<vector<int> > &dp ){
        
        if(index == n){
            return 0;
        }
        
        if(dp[index][prev+1] != -1){
            return dp[index][prev+1];
        }
        
        
        int nottake = 0 + func(index+1 , prev , n , arr , dp);
        
        int take = 0;
        
        if(prev == -1 || (prev>=0 && arr[index] > arr[prev]) ){
            take = 1 + func(index+1 , index , n , arr , dp);
        }
        
        return dp[index][prev+1] = max(nottake , take);
        
    }
    
    
    int lengthOfLIS(vector<int>& arr) {
        
        
        
        int n = arr.size();
        
        vector<vector<int> > dp(n+1 , vector<int> (n+1 , 0));   // n+1  {bca  at nottake = statr from index+1 , else go out pf bound }  n+1    
        
        
        
        // return func(0 , -1 , n  , arr , dp);
        
        
        for(int index=n-1;index>=0;index--){
            
            
            for(int prev=index-1;prev>=-1;prev--){
                
                 int nottake = 0 + dp[index+1][prev+1];   // 2nd parameter +1 
        
                int take = 0;

                if(prev == -1 || (prev>=0 && arr[index] > arr[prev]) ){
                    take = 1 + dp[index+1][index+1];  // 2nd parameter +1 
                }

                dp[index][prev+1] = max(nottake , take);
                
                
            }
        }
        
        
        return dp[0][-1+1];
        
        
        
    }
    
   
        
    
};