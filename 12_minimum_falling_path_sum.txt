int func(int i , int j , int m ,vector<vector<int>>& arr , vector<vector<int>> &dp){
    
        if(j<0 || j>=m){
            return 1e9;
        }
        
        
        if(i==0){
            return arr[i][j];
        }
        
       
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        
        
        int left = arr[i][j] + func(i-1,j-1 , m, arr , dp);
        int up = arr[i][j] + func(i-1,j , m , arr , dp);
        int right = arr[i][j] + func(i-1,j+1 , m , arr , dp);
        
        return dp[i][j] = min(left,min(up,right));
        
        
       
        
        
    }
    
    int minFallingPathSum(vector<vector<int>> &arr) {
        
        int n= arr.size();
        int m = arr[0].size();
        
        vector<vector<int>>dp(n,vector<int>(m,-1));
        
        int mini = 1e9;
        
        for(int j=0;j<m;j++){
            mini = min(mini , func(n-1,j , m , arr , dp));
        }
        
        return mini;
        
    }