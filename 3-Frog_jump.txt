
int solve(int i , vector<int> &arr , vector<int> &dp){


    if(i==0){
        return 0;
    }


    if(dp[i] != -1){
        return dp[i];
    }


    int left = solve(i-1 ,  arr , dp) + abs(arr[i] - arr[i-1]);

    int right = INT_MAX;

    if(i > 1){  
             right = solve(i-2, arr , dp) + abs(arr[i] - arr[i-2]);
    }
    
    

        dp[i]= min(left , right);

    return dp[i];


}


int frogJump(int n, vector<int> &arr)
{

  // recursion  

    // return count(n-1,h);



  // Memorization

    // vector<int> dp(n+1 , -1);
    // return solve(n-1 , arr , dp);




// Tabularization

    // vector<int> dp(n,-1);

    // dp[0] = 0;


    // for(int i=1;i<=n-1;i++)
    // {
    //     int left = dp[i-1] + abs(arr[i] - arr[i-1]);

    //     int right = INT_MAX;

    //     if(i > 1){
    //         right = dp[i-2] + abs(arr[i]- arr[i-2]);
    //     }

    //     dp[i] = min(left,right);
    // }

    // return dp[n-1];



}