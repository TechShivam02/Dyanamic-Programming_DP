
    int func(int i , int j , string s1 , string s2 , vector<vector<int>> &dp){
        
        if(i==0){
            return j;
        }
        
        if(j==0){
            return i;
        }
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        
        
        
        
        if(s1[i-1] == s2[j-1]){
            return dp[i][j] = 0+func(i-1 , j-1 , s1 , s2 , dp);
        }
        
        int insert = 1 + func(i , j-1 , s1,s2 , dp);
        int deleteac = 1 + func(i-1 , j , s1,s2 , dp);
        int replace = 1 + func(i-1 , j-1 , s1,s2 , dp);
        
        
        return dp[i][j] = min(insert , min(deleteac,replace));
        
        
    }
    
    
    
    int minDistance(string s1, string s2) {
        
        
//         int n = s1.length();
//         int m = s2.length();
        
//         vector<vector<int> > dp(n , vector<int >(m,-1));
        
        
//         return func(n-1 , m-1 , s1,s2 , dp);
        
        
        
        
        
//         int n = s1.length();
//         int m = s2.length();
        
//         vector<vector<int> > dp(n+1 , vector<int >(m+1,-1));
        
        
//         return func(n , m , s1,s2 , dp);
        
        
        
        int n = s1.length();
        int m = s2.length();
        
        vector<vector<int> > dp(n+1 , vector<int >(m+1,0));
        
        
        for(int j=0;j<=m;j++){     //  j changing   , i=0
            dp[0][j] = j;
        }
        
        for(int i=0;i<=n;i++){    //     i changing   , j=0
            dp[i][0] = i;
        }
        
        
        
        for(int i=1;i<=n;i++){
            
            for(int j=1;j<=m ; j++){
                
                
                  if(s1[i-1] == s2[j-1]){
                             dp[i][j] = dp[i-1][j-1];
                  }
                
                
                else{
                        int insert = 1 + dp[i][j-1];
                        int deleteac = 1 + dp[i-1][j];
                        int replace = 1 + dp[i-1][j-1];
        
        
                       dp[i][j] = min(insert , min(deleteac,replace));
                }
                
                
            }
        }
        
        
        
        
        return dp[n][m];
        
        
        
        
        
        
        
        
        
        
        
    }