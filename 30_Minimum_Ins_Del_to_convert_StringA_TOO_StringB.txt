class Solution {
public:
    
    
    
    
    
int func(int n , int m , string &st1 , string &st2  ,  vector<vector<int>> &dp){
        
        if(n==0 || m==0){
            return 0;
        }
        
        
        if(dp[n][m] != -1){
            return dp[n][m];
        }
        
        
        if(st1[n-1] == st2[m-1]){
            return dp[n][m] = 1 + func(n-1 , m-1 , st1 , st2 , dp);
        }
        
        
        return dp[n][m] = 0 + max( func(n-1 , m , st1 , st2 , dp) , func(n , m-1  , st1 , st2 , dp) );
    
}
    
    
    
      int longestCommonSubsequence(string s1, string s2) {
        
        int n = s1.length();
        int m = s2.length();
        
        
        vector<vector<int>> dp(n+1 , vector<int>(m+1 , -1));
        
         return func(n,m,s1 , s2 , dp);
        
          
      }
        
          
        
          
          
    int minDistance(string s1, string s2) {
        
        int n = s1.length();
        
        int m = s2.length();
        
        
        int ans = longestCommonSubsequence(s1,s2);
        
        
        return (n+m-2*ans);
        
    }
};