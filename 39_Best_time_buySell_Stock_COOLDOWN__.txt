 int func(int index ,int buy , vector<int> &arr , vector<vector<int>> &dp){
        
        if(index >= arr.size()){
            return 0;
        }
        
        
        if(dp[index][buy] !=-1){
            return dp[index][buy];
            
        }
        
        
       
          
        if(buy == 1){  // u can buy
            
           return dp[index][buy]  =  max(  -arr[index] + func(index+1 , 0 , arr , dp) ,  func(index+1 , 1 , arr,dp) );
        }
        
        else{
            
           return dp[index][buy] =  max( arr[index] + func(index+2 , 1 , arr , dp)  ,  func(index+1 , 0 , arr,dp) );
            
        }
    
    }
    
    
    
    int maxProfit(vector<int>& arr) {
        
        
         int n=  arr.size();
        
        
//         vector<vector<int> > dp( n+1 , vector<int>(2,-1));
        
//         return func(0 , 1 , arr , dp);
        
        
        vector<vector<long long> > dp( n+2 , vector<long long>(2,0));
        
        
  
        
        
        for(int index=n-1;index>=0;index--){
            
            for(int buy=1;buy>=0;buy--){
                
             
                if(index >= n){
                    continue;
                }
                
                int profit=0;
                
                if(buy == 1){  // u can buy
                         profit =    max(  -arr[index] + dp[index+1][0] ,  dp[index+1][1] );
                    }
        
                
                  else{
                        profit =    max( arr[index] + dp[index+2][1] , dp[index+1][0] );
                }
                
                dp[index][buy] = profit;
            }
        }
        
        
        return dp[0][1];    // return the pass parameter intially recursion 
        
        
        
    }