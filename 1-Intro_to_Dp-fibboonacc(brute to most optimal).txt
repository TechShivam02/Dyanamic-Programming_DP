
#include <iostream>
#include <vector>

using namespace std;




// Step1 : memorization   time= O(n)   space - O(n) + O(n)  = O(n)


int  fiboonaccMemo(int n , vector<int> &dp){
        
        if(n==0 || n==1){
            return n;
        }
        
        
        if(dp[n] != -1){
            return dp[n];
        }
        
        dp[n] = fiboonaccMemo(n-1 , dp) + fiboonaccMemo(n-2,dp);
        
        
        return dp[n];
            
}








int main()
{
    
    /*
    // memorization 
         cout<<"Enter the value for n "<<endl;
    
        int n;
        cin>>n;
        
        
        vector<int> dp(n+1, -1);
        cout<<fiboonaccMemo(n , dp);
        
     */
     
     
        
        
        
     /*      // 2 nd method
        
    // Tabularzation
        
        cout<<"Enter the value for n "<<endl;
    
        int n;
        cin>>n;
        
        
        vector<int> dp(n+1, -1);
        
        dp[0]=0;
        dp[1]=1;
        
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        
        cout<<"Ans : " << dp[n]<<endl;
        
        Time Comp  : O(n)   , Space Comp : O(n)   // space better then memo {not using extra rec call stack space }
     
     */
     
     
     
     
     
     
     
     
     
     // Most Optimal    3rd 
     
     //  we know dp[i] = dp[i-1] + dp[i-2];
     
     cout<<"Enter the value for n "<<endl;
    
        int n;
        cin>>n;
        
    int prev2=0;
    int prev1=1;
    
    int curr;
    
    for(int i=2;i<=n;i++){
        
        curr = prev2+prev1;
        prev2 = prev1;
        prev1 = curr;
        
    }
    
    
    cout<<"Ans : "<<curr<<endl;
    
    
    // Time Comp : O(n);
    // Space Comp : O(1);
    
    
     
        
        

    return 0;
}