
// Memoization     Time Comp : O(m*n)    SpaceComp : O(m-1) + O(n-1)   + O(m*n);



int func(int day , int last , vector<vector<int> > &tasks , vector<vector<int>> &dp){

    if(day == 0){

        int maxi = 0;

        for(int i=0;i<3;i++){
            if(i!=last){
                maxi = max(maxi , tasks[0][i]);
            }
        }

        return maxi;
    }


    if(dp[day][last] != -1){
        return dp[day][last];
    }




    int maxi = 0;

    for(int i=0;i<3;i++){
        if(i!=last){
            int points = tasks[day][i] + func(day-1, i, tasks , dp);

            maxi = max(maxi , points);
        }

      

    }

    dp[day][last] = maxi;
    
  return  maxi;


}


int ninjaTraining(int n, vector<vector<int>> &points)
{
        // vector<int> dp(n,0);

        vector<vector<int>> dp(n,vector<int>(4,-1));




    return  func(n-1, 3, points , dp);
    
}















// Tabulationnn...      TimeComp : O(m*n)   Space Comp : O(m*n)






		vector<vector<int>>dp(m,vector<int>(n,-1));  // m*n with -1

		dp[0][0] = 1;

		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){

					if(i==0 && j==0){
						continue;
					}

					else{

						int up=0;
						int left=0;


						if(i>0){
							up = dp[i-1][j];
						}

						if(j>0){
							left = dp[i][j-1];
						}


							dp[i][j] = up+left;
					}



				

			}
		}


	return dp[m-1][n-1];



