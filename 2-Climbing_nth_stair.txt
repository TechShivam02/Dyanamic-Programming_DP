
#include <iostream>
#include <vector>

using namespace std;




int countSteps(int n ){
    
    
    if(n < 0){
        return 0;
    }
    
    
    if(n==0 || n==1){
    
        return 1;
    }    
    
    int onestep  = countSteps(n-1);
    int twosteps = countSteps(n-2);
    
    return onestep + twosteps;
    
}




int countStepsMemo(int n , vector<int> &dp){
       
       
        if(n < 0){
             return 0;
        }
            
            
        if(n==0 || n==1){
            return 1;
        }   
    
    
        if(dp[n] != -1){
            return dp[n];
        }
    
    
    dp[n] = countStepsMemo(n-1 , dp) + countStepsMemo(n-2 , dp);
    
    return dp[n];
    
}







int main()
{
    
    
    // Recursion 
    
    // int n = 3;
    // cout<<countSteps(n);
    
    
    
    
    /*
    
    // Memoriaztion 
    
     int n = 3;
     vector<int> dp(n+1,-1);
     
    cout<<countStepsMemo(n , dp);
    
    
    */
    
    
    
    
    
    /*
    
    // Tabluation 
    
    
     int n = 4;
     vector<int> dp(n+1,-1);
     
     
     dp[0]=1;  
     dp[1]=1;
     
     
     for(int i=2;i<=n;i++){
        dp[i] = dp[i-1] + dp[i-2];    
     }
     
     
     
    cout<<"Ans : " << dp[n]<<endl;
    
    
    */
    
    
    
    
    
    
    
                // Most Optimall     time : O(n)  Space : O(1);
                
    
     int n = 3;
     
     
     int prev2=1;
     int prev1=1;
     
     int curr;
     
     
     
     for(int i=2;i<=n;i++){
       curr = prev2 + prev1;
       
       prev2 = prev1;
       prev1 = curr;
       
     }
     
     
     
     
     
    cout<<"Ans : " << curr<<endl;
    
    
    
    
    

    return 0;
}
