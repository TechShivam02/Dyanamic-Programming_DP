class Solution {
public:
    
    
    
int func(int n , int m , string &st1 , string &st2  ,  vector<vector<int>> &dp){
        
        if(n==0 || m==0){
            return 0;
        }
        
        
        if(dp[n][m] != -1){
            return dp[n][m];
        }
        
        
        if(st1[n-1] == st2[m-1]){
            return dp[n][m] = 1 + func(n-1 , m-1 , st1 , st2 , dp);
        }
        
        
        return dp[n][m] = 0 + max( func(n-1 , m , st1 , st2 , dp) , func(n , m-1  , st1 , st2 , dp) );
    
}
    
    
    
    
    
    
    int longestPalindromeSubseq(string s1) {
     
        string s2 = s1;
        
        reverse(s2.begin() , s2.end());
        
        int n = s1.length();
        
        vector<vector<int>> dp(n+1 , vector<int>(n+1 , -1));
        return func(n,n,s1 , s2 , dp);
        
        
        
    }
    
    
    
    int minInsertions(string s) {
        
        int pali = longestPalindromeSubseq(s);
        
        return s.length() - pali;
        
        
    }
};