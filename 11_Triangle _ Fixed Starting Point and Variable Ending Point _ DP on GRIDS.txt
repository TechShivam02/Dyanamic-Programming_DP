 int func(int i , int j , int n , int m , vector<vector<int>> &arr , vector<vector<int>> &dp){
        
        if(i==n-1){  // if destination row achieved;
            return arr[i][j];
        }
        
        
        if(dp[i][j] != -1){
            return dp[i][j];
        } 
        
        
        
        int down = arr[i][j] + func(i+1,j , n , m , arr , dp);
        int digright = arr[i][j] + func(i+1,j+1 , n , m , arr , dp);
        
        return dp[i][j] = min(down ,digright);
        
    
    }
    
    int minimumTotal(vector<vector<int>>& arr) {
        
        int n = arr.size();
        int m = arr[0].size();
        
        
//         vector<vector<int> > dp(n,vector<int>(n,-1));   // rows = n   // cols = n  (no of rows)  // becz maxi row = n max col = n 
        
//         return func(0,0,n,m,arr , dp);
        
        
        
        vector<vector<int> > dp(n,vector<int>(n,0));
        
        
        for(int i=n-1;i>=0;i--){
            
            for(int j=i;j>=0;j--){
                
                if(i==n-1){ 
                    dp[i][j] = arr[i][j];
                }
                
                else{
                    
                    int down = arr[i][j] + dp[i+1][j];
                    int right = arr[i][j] + dp[i+1][j+1];
                    
                    dp[i][j] = min(down,right);

                } // else 
            
            } // for loooop   j 
            
        } // for looop i 
        
        
        return dp[0][0];
        
        
        
        
        
    }