#include <vector>

int func(int index , int N , vector<int> &price , vector<vector<int> > &dp){

	if(index ==0 ){

			return  ( N/(index+1)) * price[0];
	}

	if(dp[index][N] != -1){
		return  dp[index][N];
	}


 
	int nottake = 0 + func(index-1 , N , price , dp);

	int take = INT_MIN;

	int rodlen = index+1;

	if(rodlen <= N){
		take = price[index] + func(index , N -  rodlen , price , dp);
	}

	return dp[index][N] = max(take , nottake);


}


int cutRod(vector<int> &price, int n)
{
	// Write your code here.

	
	vector<vector<int> > dp(n , vector<int> (n+1 , -1));
	// return func(n-1 , n , price , dp);


	int N = n;

	for(int n=0;n<=N;n++){
		dp[0][n] = n * price[0];
	}


	for(int index=1; index<n;index++){

		for(int n=0;n<=N ; n++){
			
			int nottake = 0 + dp[index-1][n];

			int take = INT_MIN;

			int rodlen = index+1;

			if(rodlen <= n){
				take = price[index] + dp[index][n-rodlen];
			}

			dp[index][n] = max(take , nottake);

		}
	}


	return dp[n-1][n];



}
