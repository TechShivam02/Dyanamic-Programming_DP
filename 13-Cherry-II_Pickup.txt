 int func(int i , int j1 , int j2 , int n , int m,  vector<vector<int>>& arr , vector<vector<vector<int>>> &dp){
        
        if(j1 <0 || j1>=m  ||   j2<0 || j2>=m){
            return -1e8;
        }
        
        
        if(i==n-1){
            
            if(j1==j2){
                return arr[i][j1];
            }
            
            else{
                 return arr[i][j1] + arr[i][j2];
            }
            
        }
        
        
        
        if(dp[i][j1][j2] != -1){
            return dp[i][j1][j2];
        }
        
        
        
        
        // explore all path   by alice and bob 
        
        int maxi = -1e8;
        
        
        for(int dj1=-1 ; dj1<=1; dj1++){
            
                for(int dj2=-1 ; dj2<=1; dj2++){
            
                 
                     int value=0;
                    
                    
                    if(j1 == j2){
                        value = arr[i][j1];
                    }
                    
                    else{
                        value =  arr[i][j1] + arr[i][j2];
                    }
                    
                    
                    
                    value += func(i+1,dj1+j1 , dj2+j2 , n , m , arr , dp);
                    
                    maxi = max(maxi , value);
                    
                }
            
        }
        
        return dp[i][j1][j2] = maxi;
        
        
    }
    
    
    int cherryPickup(vector<vector<int>>& arr) {
        
        int n = arr.size();
        int m = arr[0].size();
        
        
        vector<vector<vector<int>>> dp(n , vector<vector<int>>(m , vector<int>(m,-1)));
        
        
        
        return func(0, 0, m-1 , n , m , arr , dp);
        
        
        
    }